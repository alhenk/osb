<?xml version="1.0" encoding="UTF-8"?>
<xml-fragment xmlns:ser="http://www.bea.com/wli/sb/services" xmlns:tran="http://www.bea.com/wli/sb/transports" xmlns:env="http://www.bea.com/wli/config/env" xmlns:http="http://www.bea.com/wli/sb/transports/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:con="http://www.bea.com/wli/sb/typesystem/config" xmlns:jms="http://www.bea.com/wli/sb/transports/jms" xmlns:con1="http://www.bea.com/wli/sb/stages/config" xmlns:con2="http://www.bea.com/wli/sb/stages/transform/config" xmlns:con3="http://www.bea.com/wli/sb/stages/logging/config" xmlns:con4="http://www.bea.com/wli/sb/stages/routing/config" xmlns:con5="http://www.bea.com/wli/sb/pipeline/config">
  <ser:coreEntry isProxy="true" isEnabled="true">
    <ser:binding type="Mixed" xsi:type="con:MixedBindingType" xmlns:con="http://www.bea.com/wli/sb/services/bindings/config">
      <con:request type="XML">
        <con2:schema ref="task2/xsd/payment" element="payment" xmlns:con2="http://www.bea.com/wli/sb/typesystem/config"/>
      </con:request>
    </ser:binding>
    <ser:monitoring isEnabled="false">
      <ser:aggregationInterval>10</ser:aggregationInterval>
      <ser:pipelineMonitoringLevel>Pipeline</ser:pipelineMonitoringLevel>
    </ser:monitoring>
    <ser:reporting>true</ser:reporting>
    <ser:logging isEnabled="true">
      <ser:logLevel>debug</ser:logLevel>
    </ser:logging>
    <ser:sla-alerting isEnabled="true">
      <ser:alertLevel>normal</ser:alertLevel>
    </ser:sla-alerting>
    <ser:pipeline-alerting isEnabled="true">
      <ser:alertLevel>normal</ser:alertLevel>
    </ser:pipeline-alerting>
    <ser:transactions isRequired="true" sameTxForResponse="true"/>
  </ser:coreEntry>
  <ser:endpointConfig>
    <tran:provider-id>jms</tran:provider-id>
    <tran:inbound>true</tran:inbound>
    <tran:URI>
      <env:value>jms://localhost:8011/jms.tutorial.TutorialXACF/jms.tutorial.TestRegistryQueue</env:value>
    </tran:URI>
    <tran:inbound-properties/>
    <tran:all-headers>true</tran:all-headers>
    <tran:provider-specific>
      <jms:is-queue>true</jms:is-queue>
      <jms:is-secure>false</jms:is-secure>
      <jms:inbound-properties>
        <jms:message-selector>messageType='payment'</jms:message-selector>
        <jms:response-required>false</jms:response-required>
        <jms:retry-count>2</jms:retry-count>
        <jms:retry-interval>5000</jms:retry-interval>
        <jms:error-destination>jms.tutorial.TestRegistryErrorQueue</jms:error-destination>
        <jms:expiration-policy>Redirect</jms:expiration-policy>
        <jms:XA-required>true</jms:XA-required>
        <jms:transaction-timeout>600</jms:transaction-timeout>
      </jms:inbound-properties>
      <jms:request-encoding>UTF-8</jms:request-encoding>
      <jms:jndi-timeout>0</jms:jndi-timeout>
    </tran:provider-specific>
  </ser:endpointConfig>
  <ser:router>
    <con5:pipeline type="request" name="PaymentValidationPipelinePair_request">
      <con5:stage name="PaymentValidationStage">
        <con5:context>
          <con1:userNsDecl namespace="http://kz.cits.osb.com/test/registry" prefix="reg"/>
          <con1:userNsDecl namespace="http://www.openuri.org/" prefix="m"/>
        </con5:context>
        <con5:actions>
          <con2:assign varName="validationResult" xmlns:con="http://www.bea.com/wli/sb/pipeline/config">
            <con1:id>_ActionId-7716299192235838935-792d1c72.1493088d84e.-7ca4</con1:id>
            <con2:expr>
              <con1:xqueryText>"-1"</con1:xqueryText>
            </con2:expr>
          </con2:assign>
          <con2:wsCallout xmlns:con="http://www.bea.com/wli/sb/pipeline/config">
            <con1:id>_ActionId-7716299192235838935-792d1c72.1493088d84e.-7ca0</con1:id>
            <con2:service xsi:type="ref:BusinessServiceRef" ref="task2/business/PaymentAccounting" xmlns:ref="http://www.bea.com/wli/sb/reference"/>
            <con2:operation>validatePayment</con2:operation>
            <con2:request>
              <con2:body>$payment</con2:body>
            </con2:request>
            <con2:response>
              <con2:body>validationResult</con2:body>
            </con2:response>
            <con2:requestTransform>
              <con2:assign varName="payment">
                <con1:id>_ActionId-7716299192235838935-792d1c72.1493088d84e.-7ca1</con1:id>
                <con2:expr>
                  <con1:xqueryText>&lt;open:validatePayment xmlns:open="http://www.openuri.org/">
    {$body/reg:payment}
&lt;/open:validatePayment></con1:xqueryText>
                </con2:expr>
              </con2:assign>
            </con2:requestTransform>
            <con2:responseTransform/>
          </con2:wsCallout>
          <con3:log xmlns:con="http://www.bea.com/wli/sb/pipeline/config">
            <con1:id>_ActionId-7716299192235838935-792d1c72.1493088d84e.-7c9e</con1:id>
            <con3:logLevel>warning</con3:logLevel>
            <con3:expr>
              <con1:xqueryText>$validationResult</con1:xqueryText>
            </con3:expr>
            <con3:message><![CDATA[<<<<<<<<<PAYMENT VALIDATION RESULT>>>>>>>>>>>>>>]]></con3:message>
          </con3:log>
        </con5:actions>
      </con5:stage>
    </con5:pipeline>
    <con5:pipeline type="response" name="PaymentValidationPipelinePair_response"/>
    <con:flow xmlns:con="http://www.bea.com/wli/sb/pipeline/config">
      <con:pipeline-node name="PaymentValidationPipelinePair">
        <con:request>PaymentValidationPipelinePair_request</con:request>
        <con:response>PaymentValidationPipelinePair_response</con:response>
      </con:pipeline-node>
      <con:route-node name="PaymentMessageRouteNode">
        <con:context>
          <con1:userNsDecl namespace="http://www.openuri.org/" prefix="m"/>
          <con1:varNsDecl namespace="http://kz.cits.osb.com/test/registry" prefix="reg"/>
        </con:context>
        <con:actions>
          <con2:ifThenElse>
            <con1:id>_ActionId-7716299192235838935-792d1c72.1493088d84e.-7ec3</con1:id>
            <con2:case>
              <con2:condition>
                <con1:xqueryText>xs:boolean(xs:int(compare($validationResult/m:result/text(),"-1")) > xs:int(0))</con1:xqueryText>
              </con2:condition>
              <con2:actions>
                <con4:route>
                  <con1:id>_ActionId-7716299192235838935-792d1c72.1493088d84e.-7e9d</con1:id>
                  <con4:service ref="task2/business/MockingRegistryService" xsi:type="ref:BusinessServiceRef" xmlns:ref="http://www.bea.com/wli/sb/reference"/>
                  <con4:outboundTransform>
                    <con2:replace varName="body" contents-only="true">
                      <con1:id>_ActionId-7716299192235838935-792d1c72.1493088d84e.-7d27</con1:id>
                      <con2:location>
                        <con1:xpathText>.</con1:xpathText>
                      </con2:location>
                      <con2:expr>
                        <con1:xqueryText>&lt;moc:mockingRequest  xmlns:moc="http://osb.tutorial.epam.com/MockingRegistryService"> 
    &lt;request  xsi:type="xs:string" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
        {$validationResult/m:result/text()}
    &lt;/request> 
&lt;/moc:mockingRequest></con1:xqueryText>
                      </con2:expr>
                    </con2:replace>
                    <con2:routing-options>
                      <con1:id>_ActionId-246622815560990797--64e6f3f5.1493d011e98.-7f84</con1:id>
                      <con2:qualityOfService>exactly-once</con2:qualityOfService>
                    </con2:routing-options>
                  </con4:outboundTransform>
                  <con4:responseTransform>
                    <con3:log>
                      <con1:id>_ActionId-7716299192235838935-792d1c72.1493088d84e.-7e99</con1:id>
                      <con3:logLevel>warning</con3:logLevel>
                      <con3:expr>
                        <con1:xqueryText>$body</con1:xqueryText>
                      </con3:expr>
                      <con3:message>MOCKING SERVICE RESPONSE</con3:message>
                    </con3:log>
                  </con4:responseTransform>
                </con4:route>
              </con2:actions>
            </con2:case>
            <con2:default/>
          </con2:ifThenElse>
        </con:actions>
      </con:route-node>
    </con:flow>
  </ser:router>
</xml-fragment>
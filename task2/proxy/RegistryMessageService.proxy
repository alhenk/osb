<?xml version="1.0" encoding="UTF-8"?>
<xml-fragment xmlns:ser="http://www.bea.com/wli/sb/services" xmlns:tran="http://www.bea.com/wli/sb/transports" xmlns:env="http://www.bea.com/wli/config/env" xmlns:http="http://www.bea.com/wli/sb/transports/http" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:con="http://www.bea.com/wli/sb/pipeline/config" xmlns:con1="http://www.bea.com/wli/sb/stages/logging/config" xmlns:con2="http://www.bea.com/wli/sb/stages/config" xmlns:con3="http://www.bea.com/wli/sb/stages/transform/config" xmlns:con4="http://www.bea.com/wli/sb/stages/publish/config">
  <ser:coreEntry isProxy="true" isEnabled="true">
    <ser:binding type="SOAP" isSoap12="false" xsi:type="con3:SoapBindingType" xmlns:con3="http://www.bea.com/wli/sb/services/bindings/config">
      <con3:wsdl ref="task2/wsdl/RegistryMessageService"/>
      <con3:binding>
        <con3:name>RegistryMessageServiceSOAP</con3:name>
        <con3:namespace>http://osb.tutorial.epam.com/RegistryMessageService/test</con3:namespace>
      </con3:binding>
      <con3:selector type="SOAP body"/>
      <con3:WSI-compliant>false</con3:WSI-compliant>
    </ser:binding>
    <ser:monitoring isEnabled="false">
      <ser:aggregationInterval>10</ser:aggregationInterval>
      <ser:pipelineMonitoringLevel>Pipeline</ser:pipelineMonitoringLevel>
    </ser:monitoring>
    <ser:reporting>true</ser:reporting>
    <ser:logging isEnabled="true">
      <ser:logLevel>debug</ser:logLevel>
    </ser:logging>
    <ser:sla-alerting isEnabled="true">
      <ser:alertLevel>normal</ser:alertLevel>
    </ser:sla-alerting>
    <ser:pipeline-alerting isEnabled="true">
      <ser:alertLevel>normal</ser:alertLevel>
    </ser:pipeline-alerting>
    <ser:ws-policy>
      <ser:binding-mode>wsdl-policy-attachments</ser:binding-mode>
    </ser:ws-policy>
  </ser:coreEntry>
  <ser:endpointConfig>
    <tran:provider-id>http</tran:provider-id>
    <tran:inbound>true</tran:inbound>
    <tran:URI>
      <env:value>/task2/proxy/RegistryMessageService</env:value>
    </tran:URI>
    <tran:inbound-properties/>
    <tran:all-headers>false</tran:all-headers>
    <tran:provider-specific>
      <http:inbound-properties/>
    </tran:provider-specific>
  </ser:endpointConfig>
  <ser:router>
    <con:pipeline type="request" name="ForwardMessagePipelinePair_request">
      <con:stage name="MessageProcessingStage">
        <con:context>
          <con2:userNsDecl namespace="http://osb.tutorial.epam.com/RegistryMessageService/test" prefix="test"/>
          <con2:userNsDecl namespace="http://kz.cits.osb.com/test/registry" prefix="msg"/>
          <con2:varNsDecl namespace="http://osb.tutorial.epam.com/RegestryMessageService" prefix="reg"/>
        </con:context>
        <con:actions>
          <con1:log>
            <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7f03</con2:id>
            <con1:logLevel>warning</con1:logLevel>
            <con1:expr>
              <con2:xqueryText>$body/test:forwardMessage/request/text()</con2:xqueryText>
            </con1:expr>
            <con1:message>MESSAGE REQUEST</con1:message>
          </con1:log>
          <con3:ifThenElse>
            <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7f02</con2:id>
            <con3:case>
              <con3:condition>
                <con2:xqueryText>exists($body/test:forwardMessage/request/text())</con2:xqueryText>
              </con3:condition>
              <con3:actions>
                <con3:javaCallout varName="registry">
                  <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7f01</con2:id>
                  <con3:archive ref="task2/jar/task2-zip-util"/>
                  <con3:className>com.epam.osb.tutorial.registry.ZipUtil</con3:className>
                  <con3:method>public static java.lang.String uncompressString(java.lang.String)</con3:method>
                  <con3:expr>
                    <con2:xqueryText>$body/test:forwardMessage/request/text()</con2:xqueryText>
                  </con3:expr>
                </con3:javaCallout>
                <con3:assign varName="registryXml">
                  <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7f00</con2:id>
                  <con3:expr>
                    <con2:xqueryText>fn-bea:inlinedXML($registry)</con2:xqueryText>
                  </con3:expr>
                </con3:assign>
                <con1:log>
                  <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7eff</con2:id>
                  <con1:logLevel>warning</con1:logLevel>
                  <con1:expr>
                    <con2:xqueryText>$registryXml</con2:xqueryText>
                  </con1:expr>
                  <con1:message>XMLObject</con1:message>
                </con1:log>
                <con3:validate>
                  <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7efe</con2:id>
                  <con3:schema ref="task2/xsd/registry"/>
                  <con3:schemaElement xmlns:reg="http://kz.cits.osb.com/test/registry">reg:registry</con3:schemaElement>
                  <con3:varName>registryXml</con3:varName>
                  <con3:resultVarName>isValid</con3:resultVarName>
                </con3:validate>
                <con3:ifThenElse>
                  <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7efd</con2:id>
                  <con3:case>
                    <con3:condition>
                      <con2:xqueryText>$isValid</con2:xqueryText>
                    </con3:condition>
                    <con3:actions>
                      <con3:assign varName="paymentCount">
                        <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7efc</con2:id>
                        <con3:expr>
                          <con2:xqueryText>count($registryXml/msg:payment)</con2:xqueryText>
                        </con3:expr>
                      </con3:assign>
                      <con1:log>
                        <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7efb</con2:id>
                        <con1:logLevel>warning</con1:logLevel>
                        <con1:expr>
                          <con2:xqueryText>$paymentCount</con2:xqueryText>
                        </con1:expr>
                        <con1:message>PAYMENT COUNT</con1:message>
                      </con1:log>
                      <con4:route>
                        <con2:id>_ActionId-3596074421942596251--6a9f8730.148c9c92142.-7f21</con2:id>
                        <con4:service ref="task2/business/JMSProducer" xsi:type="ref:BusinessServiceRef" xmlns:ref="http://www.bea.com/wli/sb/reference"/>
                        <con4:outboundTransform>
                          <con3:replace varName="body" contents-only="true">
                            <con2:id>_ActionId-3596074421942596251--6a9f8730.148c9c92142.-7eb9</con2:id>
                            <con3:expr>
                              <con2:xqueryText>$registry</con2:xqueryText>
                            </con3:expr>
                          </con3:replace>
                        </con4:outboundTransform>
                      </con4:route>
                      <con3:assign varName="response">
                        <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7efa</con2:id>
                        <con3:expr>
                          <con2:xqueryText>'OK'</con2:xqueryText>
                        </con3:expr>
                      </con3:assign>
                    </con3:actions>
                  </con3:case>
                  <con3:default>
                    <con3:assign varName="response">
                      <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7ef9</con2:id>
                      <con3:expr>
                        <con2:xqueryText>'MESSAGE IS INVALID'</con2:xqueryText>
                      </con3:expr>
                    </con3:assign>
                  </con3:default>
                </con3:ifThenElse>
              </con3:actions>
            </con3:case>
            <con3:default>
              <con3:assign varName="response">
                <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7ef8</con2:id>
                <con3:expr>
                  <con2:xqueryText>'FAIL: NO MESSAGE'</con2:xqueryText>
                </con3:expr>
              </con3:assign>
            </con3:default>
          </con3:ifThenElse>
        </con:actions>
      </con:stage>
    </con:pipeline>
    <con:pipeline type="response" name="ForwardMessagePipelinePair_response">
      <con:stage name="ResponseStage">
        <con:context>
          <con2:varNsDecl namespace="http://osb.tutorial.epam.com/RegistryMessageService/test" prefix="test"/>
        </con:context>
        <con:actions>
          <con3:replace varName="body" contents-only="true">
            <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7ef7</con2:id>
            <con3:expr>
              <con2:xqueryText>$response</con2:xqueryText>
            </con3:expr>
          </con3:replace>
          <con1:log>
            <con2:id>_ActionId-1670448407140246443--3e27a6e4.148c9ab02af.-7ef6</con2:id>
            <con1:logLevel>warning</con1:logLevel>
            <con1:expr>
              <con2:xqueryText>$body</con2:xqueryText>
            </con1:expr>
            <con1:message>RESPONSE</con1:message>
          </con1:log>
        </con:actions>
      </con:stage>
    </con:pipeline>
    <con:pipeline type="request" name="SendDataPipelinePair_request">
      <con:stage name="ErrorStage">
        <con:context/>
        <con:actions>
          <con3:Error>
            <con2:id>_ActionId-3596074421942596251--6a9f8730.148c9c92142.-7fa7</con2:id>
            <con3:errCode>TASK2:00002</con3:errCode>
            <con3:message>The SendData operation is not implemented yet.</con3:message>
          </con3:Error>
        </con:actions>
      </con:stage>
    </con:pipeline>
    <con:pipeline type="response" name="SendDataPipelinePair_response"/>
    <con:pipeline type="request" name="DefaultOperationPipelinePair_request">
      <con:stage name="ErrorStage">
        <con:context/>
        <con:actions>
          <con3:Error>
            <con2:id>_ActionId-3596074421942596251--6a9f8730.148c9c92142.-7f6e</con2:id>
            <con3:errCode>TASK2:00001</con3:errCode>
            <con3:message>Unknown operation.</con3:message>
          </con3:Error>
        </con:actions>
      </con:stage>
    </con:pipeline>
    <con:pipeline type="response" name="DefaultOperationPipelinePair_response"/>
    <con:flow>
      <con:branch-node type="operation" name="RegistryMessageServiceOperations">
        <con:context/>
        <con:branch-table>
          <con:branch name="forwardMessage">
            <con:operator>equals</con:operator>
            <con:value/>
            <con:flow>
              <con:pipeline-node name="ForwardMessagePipelinePair">
                <con:request>ForwardMessagePipelinePair_request</con:request>
                <con:response>ForwardMessagePipelinePair_response</con:response>
              </con:pipeline-node>
            </con:flow>
          </con:branch>
          <con:branch name="sendData">
            <con:operator>equals</con:operator>
            <con:value/>
            <con:flow>
              <con:pipeline-node name="SendDataPipelinePair">
                <con:request>SendDataPipelinePair_request</con:request>
                <con:response>SendDataPipelinePair_response</con:response>
              </con:pipeline-node>
            </con:flow>
          </con:branch>
          <con:default-branch>
            <con:flow>
              <con:pipeline-node name="DefaultOperationPipelinePair">
                <con:request>DefaultOperationPipelinePair_request</con:request>
                <con:response>DefaultOperationPipelinePair_response</con:response>
              </con:pipeline-node>
            </con:flow>
          </con:default-branch>
        </con:branch-table>
      </con:branch-node>
    </con:flow>
  </ser:router>
</xml-fragment>